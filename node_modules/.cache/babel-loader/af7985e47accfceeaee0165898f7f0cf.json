{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lucas\\\\Lucas\\\\Faculdade\\\\ChatDist\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [unreadUsers, setUnreadUsers] = useState({});\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n  useEffect(() => {\n    fetchEstablishmentData(); // Função para buscar os dados do estabelecimento\n  }, []);\n\n  const fetchEstablishmentData = async () => {\n    try {\n      const token = 'seu_token_aqui';\n      const response = await fetch('http://localhost:3000/get_current_establishment', {\n        method: 'GET',\n        credentials: 'include' // Importante se as cookies forem usadas para autenticação\n\n      });\n\n      if (response.ok) {\n        const establishmentData = await response.json(); // Estabelecimento autenticado encontrado, atualize os dados no estado do React\n\n        setUserData({ ...userData,\n          username: establishmentData.email,\n          connected: true\n        });\n        connect();\n      } else {// Trate a ausência de estabelecimento autenticado\n      }\n    } catch (error) {\n      console.error('Erro ao buscar informações do estabelecimento:', error);\n    }\n  };\n\n  useEffect(() => {\n    checkAuthentication(); // Verifica a autenticação ao carregar o componente\n  }, []);\n\n  const checkAuthentication = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/get_current_establishment', {\n        method: 'GET',\n        credentials: 'include'\n      });\n\n      if (response.ok) {\n        const establishmentData = await response.json(); // Estabelecimento autenticado encontrado, atualiza os dados no estado do React\n\n        setUserData({ ...userData,\n          username: establishmentData.email,\n          connected: true\n        });\n        connect(); // Conecta automaticamente ao receber os dados do estabelecimento\n      } else {// Se não estiver autenticado, não faz nada\n      }\n    } catch (error) {\n      console.error('Erro ao verificar autenticação:', error);\n    }\n  };\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    const senderName = payloadData.senderName;\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n\n    setUnreadUsers({ ...unreadUsers,\n      [senderName]: true\n    });\n  };\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n    const senderName = payloadData.senderName;\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n\n    setUnreadUsers({ ...unreadUsers,\n      [senderName]: true\n    });\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const registerUser = () => {\n    connect();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"BEACH SERVICE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"} ${unreadUsers[name] ? 'unread' : ''}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 29\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 71\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"Enviar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 34\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 29\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 71\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"Enviar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Digite seu nome\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        className: \"conect\",\n        children: \"Conectar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"BQhBqbU3ZPJM1WrbTdru6cYF7jw=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/lucas/Lucas/Faculdade/ChatDist/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","SockJS","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","unreadUsers","setUnreadUsers","userData","setUserData","username","receivername","connected","message","console","log","fetchEstablishmentData","token","response","fetch","method","credentials","ok","establishmentData","json","email","connect","error","checkAuthentication","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","push","list","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","registerUser","keys","map","name","index","chat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {over} from 'stompjs';\nimport SockJS from 'sockjs-client';\n\nvar stompClient =null;\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());     \n    const [publicChats, setPublicChats] = useState([]); \n    const [tab,setTab] =useState(\"CHATROOM\");\n    const [unreadUsers, setUnreadUsers] = useState({});\n    const [userData, setUserData] = useState({\n        username: '',\n        receivername: '',\n        connected: false,\n        message: ''\n      });\n    useEffect(() => {\n      console.log(userData);\n    }, [userData]);\n\n    useEffect(() => {\n        fetchEstablishmentData(); // Função para buscar os dados do estabelecimento\n      }, []);\n      \n      const fetchEstablishmentData = async () => {\n        try {\n          const token = 'seu_token_aqui';\n          const response = await fetch('http://localhost:3000/get_current_establishment', {\n            method: 'GET',\n            credentials: 'include', // Importante se as cookies forem usadas para autenticação\n          });\n      \n          if (response.ok) {\n            const establishmentData = await response.json();\n            // Estabelecimento autenticado encontrado, atualize os dados no estado do React\n            setUserData({\n              ...userData,\n              username: establishmentData.email,\n              connected: true, \n            });\n            connect();\n          } else {\n            // Trate a ausência de estabelecimento autenticado\n          }\n        } catch (error) {\n          console.error('Erro ao buscar informações do estabelecimento:', error);\n        }\n      };\n    \n    useEffect(() => {\n        checkAuthentication(); // Verifica a autenticação ao carregar o componente\n      }, []);\n    \n      const checkAuthentication = async () => {\n        try {\n          const response = await fetch('http://localhost:3000/get_current_establishment', {\n            method: 'GET',\n            credentials: 'include',\n          });\n    \n          if (response.ok) {\n            const establishmentData = await response.json();\n            // Estabelecimento autenticado encontrado, atualiza os dados no estado do React\n            setUserData({\n              ...userData,\n              username: establishmentData.email,\n              connected: true,\n            });\n            connect(); // Conecta automaticamente ao receber os dados do estabelecimento\n          } else {\n            // Se não estiver autenticado, não faz nada\n          }\n        } catch (error) {\n          console.error('Erro ao verificar autenticação:', error);\n        }\n      }; \n    const connect =()=>{\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({},onConnected, onError);\n    }\n\n    const onConnected = () => {\n        setUserData({...userData,\"connected\": true});\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/'+userData.username+'/private', onPrivateMessage);\n        userJoin();\n    }\n\n    const userJoin=()=>{\n          var chatMessage = {\n            senderName: userData.username,\n            status:\"JOIN\"\n          };\n          stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    }\n\n    const onMessageReceived = (payload)=>{\n        var payloadData = JSON.parse(payload.body);\n        const senderName = payloadData.senderName;\n        switch(payloadData.status){\n            case \"JOIN\":\n                if(!privateChats.get(payloadData.senderName)){\n                    privateChats.set(payloadData.senderName,[]);\n                    setPrivateChats(new Map(privateChats));\n                }\n                break;\n            case \"MESSAGE\":\n                publicChats.push(payloadData);\n                setPublicChats([...publicChats]);\n                break;\n        }\n        setUnreadUsers({ ...unreadUsers, [senderName]: true });\n    }\n    \n    const onPrivateMessage = (payload)=>{\n        console.log(payload);\n        var payloadData = JSON.parse(payload.body);\n        const senderName = payloadData.senderName;\n        if(privateChats.get(payloadData.senderName)){\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        }else{\n            let list =[];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName,list);\n            setPrivateChats(new Map(privateChats));\n        }\n        setUnreadUsers({ ...unreadUsers, [senderName]: true });\n\n    }\n\n    const onError = (err) => {\n        console.log(err);\n        \n    }\n\n    const handleMessage =(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"message\": value});\n    }\n    const sendValue=()=>{\n            if (stompClient) {\n              var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status:\"MESSAGE\"\n              };\n              console.log(chatMessage);\n              stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n              setUserData({...userData,\"message\": \"\"});\n            }\n    }\n\n    const sendPrivateValue=()=>{\n        if (stompClient) {\n          var chatMessage = {\n            senderName: userData.username,\n            receiverName:tab,\n            message: userData.message,\n            status:\"MESSAGE\"\n          };\n          \n          if(userData.username !== tab){\n            privateChats.get(tab).push(chatMessage);\n            setPrivateChats(new Map(privateChats));\n          }\n          stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n          setUserData({...userData,\"message\": \"\"});\n        }\n    }\n\n    const handleUsername=(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"username\": value});\n    }\n\n    const registerUser=()=>{\n        connect();\n    }\n    return (\n    <div className=\"container\">\n        <div>\n            <h1 className='title'>BEACH SERVICE</h1>\n        </div>\n        {userData.connected?\n        <div className=\"chat-box\">\n            <div className=\"member-list\">\n                <ul>                    \n                    {[...privateChats.keys()].map((name,index)=>(\n                        <li onClick={()=>{setTab(name)}} className={`member ${tab===name && \"active\"} ${unreadUsers[name] ? 'unread' : ''}`} key={index}>{name}</li>\n                    ))}\n                </ul>\n            </div>\n            {tab===\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {publicChats.map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendValue}>Enviar</button>\n                </div>\n            </div>}\n            {tab!==\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {[...privateChats.get(tab)].map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>Enviar</button>\n                </div>\n            </div>}\n        </div>\n        :\n        \n        <div className=\"register\">\n            <input\n                    id=\"user-name\"\n                    placeholder=\"Digite seu nome\"\n                    name=\"userName\"\n                    value={userData.username}\n                    onChange={handleUsername}\n                    margin=\"normal\"\n            />\n            <button type=\"button\" onClick={registerUser} className=\"conect\">\n                        Conectar\n            </button> \n        </div>}\n    </div>\n    )\n}\n\nexport default ChatRoom\n"]},"metadata":{},"sourceType":"module"}